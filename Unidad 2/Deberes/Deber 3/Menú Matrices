#include <stdio.h>
#include <stdlib.h>

// Declaracion de funciones
void llenarMatriz(int filas, int columnas, int matriz[filas][columnas], char nombre);
void mostrarMatriz(int filas, int columnas, int matriz[filas][columnas]);
void sumarMatrices(int filas, int columnas, int A[filas][columnas], int B[filas][columnas]);
void restarMatrices(int filas, int columnas, int A[filas][columnas], int B[filas][columnas]);
void multiplicarMatrices(int f1, int c1, int A[f1][c1], int f2, int c2, int B[f2][c2]);
void elevarAlCuadrado(int n, int matriz[n][n], char nombre);

int main() {
    int f1, c1, f2, c2;

    //RF1: El programa debe permitir al usuario ingresar el nÃºmero de filas y columnas de la matriz A.
    printf("Ingrese el numero de filas de la matriz A: ");
    scanf("%d", &f1);
    printf("Ingrese el numero de columnas de la matriz A: ");
    scanf("%d", &c1);

    //RF2: El programa debe permitir al usuario ingresar el nÃºmero de filas y columnas de la matriz B.
    printf("Ingrese el numero de filas de la matriz B: ");
    scanf("%d", &f2);
    printf("Ingrese el numero de columnas de la matriz B: ");
    scanf("%d", &c2);

    int A[f1][c1], B[f2][c2];

    //RF3: El programa debe permitir al usuario ingresar los elementos de la matriz A.
    printf("\n--- Llenar Matriz A ---\n");
    llenarMatriz(f1, c1, A, 'A');

    //RF4: El programa debe permitir al usuario ingresar los elementos de la matriz B.
    printf("\n--- Llenar Matriz B ---\n");
    llenarMatriz(f2, c2, B, 'B');

    //RF5: El programa debe permitir al usuario elegir las operaciones mediante un menÃº interactivo.
    int opcion;
    do {
        printf("\n======= MENU =======\n");
        printf("1. Mostrar matrices\n");
        printf("2. Sumar A + B\n");
        printf("3. Restar A - B\n");
        printf("4. Multiplicar A x B\n");
        printf("5. Elevar al cuadrado una matriz (A o B)\n");
        printf("0. Salir\n");
        printf("Seleccione una opcion: ");
        scanf("%d", &opcion);

        switch(opcion) {
            //RF6: El programa debe permitir mostrar en pantalla las matrices A y B.
            case 1:
                printf("\nMatriz A:\n");
                mostrarMatriz(f1, c1, A);
                printf("\nMatriz B:\n");
                mostrarMatriz(f2, c2, B);
                break;
            case 2:
                //RF7: El programa debe permitir realizar la suma de las matrices A y B, si ambas tienen el mismo tamaÃ±o.
                if (f1 == f2 && c1 == c2)
                    sumarMatrices(f1, c1, A, B);
                else
                    printf("Error: las matrices deben tener el mismo tamaÃ±o para la suma.\n");
                break;
            case 3:
                //RF8: El programa debe permitir realizar la resta de las matrices A y B, si ambas tienen el mismo tamaÃ±o.
                if (f1 == f2 && c1 == c2)
                    restarMatrices(f1, c1, A, B);
                else
                    printf("Error: las matrices deben tener el mismo tamaÃ±o para la resta.\n");
                break;
            case 4:
                //RF9: El programa debe permitir realizar la multiplicaciÃ³n de la matriz A por la matriz B, si el nÃºmero de columnas de A es igual al nÃºmero de filas de B.
                if (c1 == f2)
                    multiplicarMatrices(f1, c1, A, f2, c2, B);
                else
                    printf("Error: el numero de columnas de A debe ser igual al numero de filas de B para multiplicar.\n");
                break;
            case 5:
                //RF10: El programa debe permitir elevar al cuadrado una de las matrices a eleccion del usuario
                printf("Que matriz desea elevar al cuadrado? (A/B): ");
                char eleccion;
                scanf(" %c", &eleccion);
                if (eleccion == 'A' || eleccion == 'a') {
                    if (f1 == c1)
                        elevarAlCuadrado(f1, A, 'A');
                    else
                        printf("Error: La matriz A no es cuadrada.\n");
                } else if (eleccion == 'B' || eleccion == 'b') {
                    if (f2 == c2)
                        elevarAlCuadrado(f2, B, 'B');
                    else
                        printf("Error: La matriz B no es cuadrada.\n");
                } else {
                    printf("OpciÃ³n invalida.\n");
                }
                break; // â† Esta llave y break estaban mal colocadas
            //RF11: El programa debe permitir salir del menÃº y finalizar la ejecuciÃ³n cuando el usuario lo indique.
            case 0:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opcion invalida.\n");
        }
    } while (opcion != 0);

    return 0;
}

// Funciones

void llenarMatriz(int filas, int columnas, int matriz[filas][columnas], char nombre) {
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            printf("Ingrese elemento %c[%d][%d]: ", nombre, i, j);
            scanf("%d", &matriz[i][j]);
        }
    }
}

void mostrarMatriz(int filas, int columnas, int matriz[filas][columnas]) {
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            printf("%4d ", matriz[i][j]);
        }
        printf("\n");
    }
}

void sumarMatrices(int filas, int columnas, int A[filas][columnas], int B[filas][columnas]) {
    int resultado[filas][columnas];
    printf("\nResultado de A + B:\n");
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            resultado[i][j] = A[i][j] + B[i][j];
            printf("%4d ", resultado[i][j]);
        }
        printf("\n");
    }
}

void restarMatrices(int filas, int columnas, int A[filas][columnas], int B[filas][columnas]) {
    int resultado[filas][columnas];
    printf("\nResultado de A - B:\n");
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            resultado[i][j] = A[i][j] - B[i][j];
            printf("%4d ", resultado[i][j]);
        }
        printf("\n");
    }
}

void multiplicarMatrices(int f1, int c1, int A[f1][c1], int f2, int c2, int B[f2][c2]) {
    int resultado[f1][c2];

    for (int i = 0; i < f1; i++) {
        for (int j = 0; j < c2; j++) {
            resultado[i][j] = 0;
            for (int k = 0; k < c1; k++) {
                resultado[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    printf("\nResultado de A x B:\n");
    mostrarMatriz(f1, c2, resultado);
}

void elevarAlCuadrado(int n, int matriz[n][n], char nombre) {
    int resultado[n][n];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            resultado[i][j] = 0;
            for (int k = 0; k < n; k++) {
                resultado[i][j] += matriz[i][k] * matriz[k][j];
            }
        }
    }

    printf("\nResultado de %c^2:\n", nombre);
    mostrarMatriz(n, n, resultado);
}
